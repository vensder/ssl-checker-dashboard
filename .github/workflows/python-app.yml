# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    paths-ignore:
      - 'README.*'
      - 'img/**'
      - 'k8s/**'
      - 'LICENSE'
      - 'docker-compose-prebuilt.yml'
      - 'docker-compose.yml'
    branches:
      - master
    tags:
      - '*'

  pull_request:
    paths-ignore:
      - 'README.*'
      - 'img/**'
      - 'k8s/**'
      - 'LICENSE'
      - 'docker-compose-prebuilt.yml'
      - 'docker-compose.yml'
    branches:
      - master


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3
      uses: actions/setup-python@v2
      with:
        python-version: 3.13.3

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        pytest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Integration test
      run: |
        ./tests/integration_tests.sh

    - name: Build dashboard image
      run: docker build dashboard/ --file dashboard/Dockerfile --tag ssl-checker-dashboard

    - name: Build checker image
      run: docker build checker/ --file checker/Dockerfile --tag  ssl-cert-checker

    - name: Build notifier image
      run: docker build notifier/ --file notifier/Dockerfile --tag  ssl-cert-notifier

    # - name: Log into registry
    #   run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Push dashboard image
      run: |
        IMAGE_ID=vensder/ssl-checker-dashboard

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest

        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION

        docker tag ssl-checker-dashboard $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION

    - name: Push checker image
      run: |
        IMAGE_ID=vensder/ssl-cert-checker

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest

        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION

        docker tag ssl-cert-checker $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION

        # ssl-cert-notifier
    - name: Push notifier image
      run: |
        IMAGE_ID=vensder/ssl-cert-notifier

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest

        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION

        docker tag ssl-cert-notifier $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
